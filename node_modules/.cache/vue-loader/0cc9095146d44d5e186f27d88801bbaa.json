{"remainingRequest":"C:\\Users\\marko\\IdeaProjects\\formula1_portal_web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\marko\\IdeaProjects\\formula1_portal_web\\src\\components\\UserManagement.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"C:\\Users\\marko\\IdeaProjects\\formula1_portal_web\\src\\components\\UserManagement.vue","mtime":1643551754808},{"path":"C:\\Users\\marko\\IdeaProjects\\formula1_portal_web\\node_modules\\@vue\\cli-service\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\marko\\IdeaProjects\\formula1_portal_web\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\marko\\IdeaProjects\\formula1_portal_web\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\marko\\IdeaProjects\\formula1_portal_web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\marko\\IdeaProjects\\formula1_portal_web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi51c2VyQnV0dG9uc3sKICBtYXJnaW4tdG9wOiAxJTsKICBtYXJnaW4tYm90dG9tOiAxJTsKICB3aWR0aDogOTclOwp9Ci5idXR0b257CiAgd2lkdGg6IDIwJTsKICBmbG9hdDogcmlnaHQ7Cn0KLnVzZXJUYWJsZXsKICBtYXJnaW46IDAgYXV0bzsKICB3aWR0aDogOTclOwp9Ci51c2VyQ2FyZHMgewogIGJvcmRlcjogbm9uZTsKfQoudGFibGUtaG92ZXIgdGJvZHkgdHI6aG92ZXIgdGQsIC50YWJsZS1ob3ZlciB0Ym9keSB0cjpob3ZlciB0aCB7CiAgYmFja2dyb3VuZC1jb2xvcjogI2Q3ZmFmOTsKfQo="},{"version":3,"sources":["UserManagement.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"UserManagement.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div class=\"hello\">\r\n    <b-button class=\"userButtons\" variant=\"outline-success\">Add User</b-button>\r\n\r\n    <div class=\"userTable\">\r\n      <b-table\r\n        no-border-collapse\r\n        small\r\n        head-variant=\"light\"\r\n        responsive\r\n        hover\r\n        primary-key=\"id\"\r\n        :items=\"users\"\r\n        :fields=\"usersFields\"\r\n        ref=\"userTable\"\r\n        id=\"userTable\"\r\n        @row-clicked=\"item=>$set(item, '_showDetails', !item._showDetails)\"\r\n        >\r\n\r\n        <template slot=\"row-details\" slot-scope=\"row\">\r\n          <b-card class=\"userCards\">\r\n            <b-row class=\"mb-2\">\r\n              <b-col sm=\"3\" class=\"text-sm-right\"><b>Roles:</b></b-col>\r\n              <b-col>{{ row.item.roles }}</b-col>\r\n            </b-row>\r\n            <b-button class=\"button\" variant=\"outline-danger\" @click=\"deleteUser(row.item.username)\">Delete User</b-button>\r\n            <b-button v-b-modal.editRoles class=\"button\" variant=\"outline-info\" @click=\"clearRoles();fillRoles(row.item.roles)\">Edit Roles</b-button>\r\n            <b-button class=\"button\" variant=\"outline-info\">Reset Password</b-button>\r\n\r\n            <b-modal id=\"editRoles\" @ok=\"updateUserRoles(row.item.id)\">\r\n              \r\n              <b-form-select v-model=\"selectedRoles\" :options=\"options\" multiple :select-size=\"4\"></b-form-select>\r\n\r\n            </b-modal>\r\n          </b-card>\r\n\r\n        </template>\r\n      </b-table>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\n//import { required } from 'vuelidate/lib/validators'\r\nexport default {\r\n  name: 'UserManagement',\r\n  props: {\r\n    msg: String\r\n  },\r\n  mounted (){\r\n    this.getUsers();\r\n  },\r\n  data : function() {\r\n    return {\r\n      users: [],\r\n      usersFields: [\r\n        {key: 'id', label: 'ID', sortable: true},\r\n        {key: 'username', label: 'Username', sortable: true},\r\n        {key: 'email', label: 'Email' }\r\n      ],\r\n      selectedRoles: [],\r\n      options: [\r\n        { value: 1, text: 'ROLE_USER' },\r\n        { value: 2, text: 'ROLE_MODERATOR' },\r\n        { value: 3, text: 'ROLE_ADMIN' },\r\n      ]\r\n    } \r\n  },\r\n  methods: {\r\n    clearRoles(){\r\n      this.selectedRoles = [];\r\n    },\r\n    fillRoles(roles){\r\n      roles.forEach(element =>{\r\n        console.log(element);\r\n        console.log(element.name);\r\n        this.selectedRoles.push(element.id)\r\n      });\r\n\r\n    },\r\n    getUsers() {\r\n      let URL = 'portal/listUsers';\r\n      let promise = axios.get(URL)\r\n      return promise.then((response) => {\r\n          if(response.status == '200'){\r\n            this.users = response.data.users\r\n          }else{\r\n            alert('ALERT');\r\n          }\r\n\r\n        },\r\n        ).catch(err => {\r\n          alert('ALERTR');\r\n        })\r\n    },\r\n    updateUserRoles(userID) {\r\n      let URL = 'portal/updateUserRoles';\r\n      let promise = axios.post(URL,{\r\n        userid: userID,\r\n        roles: this.selectedRoles\r\n      })\r\n      return promise.then((response) => {\r\n          if(response.status == '200'){\r\n            this.$root.$emit('bv::refresh::table', 'userTable');\r\n            this.getUsers();\r\n            this.makeToast(\"User Roles Edited Successfully\", \"success\", response.data.message, 30000);\r\n          }else{\r\n            alert('ALERT');\r\n          }\r\n\r\n        },\r\n        ).catch(err => {\r\n          alert('ALERTR');\r\n        })\r\n    },\r\n    deleteUser(username) {\r\n      let URL = 'portal/deleteUser';\r\n      let promise = axios.delete(URL,{\r\n        data: {\r\n          username: username\r\n        }\r\n      })\r\n\r\n      return promise.then((response) => {\r\n          if(response.status == '200'){\r\n            this.$root.$emit('bv::refresh::table', 'userTable');\r\n            this.getUsers();\r\n            this.makeToast(\"User Deleted Successfully\", \"success\", response.data.message, 30000);\r\n          }else{\r\n            alert('ALERT');\r\n          }\r\n\r\n        },\r\n        ).catch(err => {\r\n          alert('ALERTR');\r\n        })\r\n    },\r\n    makeToast(title, variant, content, delay) {\r\n      this.$bvToast.toast(content, {\r\n          title: title,\r\n          toaster: 'b-toaster-top-center',\r\n          variant: variant,\r\n          solid: true,\r\n          \"auto-hide-delay\": delay\r\n      })\r\n    },\r\n\r\n  }\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style >\r\n  .userButtons{\r\n    margin-top: 1%;\r\n    margin-bottom: 1%;\r\n    width: 97%;\r\n  }\r\n  .button{\r\n    width: 20%;\r\n    float: right;\r\n  }\r\n  .userTable{\r\n    margin: 0 auto;\r\n    width: 97%;\r\n  }\r\n  .userCards {\r\n    border: none;\r\n  }\r\n  .table-hover tbody tr:hover td, .table-hover tbody tr:hover th {\r\n    background-color: #d7faf9;\r\n  }\r\n</style>\r\n"]}]}