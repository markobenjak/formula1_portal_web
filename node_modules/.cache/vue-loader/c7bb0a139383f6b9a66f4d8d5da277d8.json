{"remainingRequest":"C:\\Users\\marko\\IdeaProjects\\formula1_portal_web\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\marko\\IdeaProjects\\formula1_portal_web\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\marko\\IdeaProjects\\formula1_portal_web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\marko\\IdeaProjects\\formula1_portal_web\\src\\components\\MainPage.vue?vue&type=template&id=109177d0&scoped=true&","dependencies":[{"path":"C:\\Users\\marko\\IdeaProjects\\formula1_portal_web\\src\\components\\MainPage.vue","mtime":1641751046670},{"path":"C:\\Users\\marko\\IdeaProjects\\formula1_portal_web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\marko\\IdeaProjects\\formula1_portal_web\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\marko\\IdeaProjects\\formula1_portal_web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\marko\\IdeaProjects\\formula1_portal_web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}